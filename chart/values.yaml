imagePullSecrets:
# 持久化后端
persistence:
  init: true
  storageClass:
  accessMode: ReadWriteOnce
  size: 8Gi
initContainers:
  image: harbor.longguikeji.com/ark-releases/busybox:latest
  pullPolicy: IfNotPresent
mysql:
  enabled: true
  image:
    registry: harbor.longguikeji.com
    repository: ark-releases/mysql
    tag: 5.7.37-debian-10-r55
    pullPolicy: IfNotPresent
  ## @param architecture MySQL architecture (`standalone` or `replication`)
  ##
  architecture: standalone
  ## MySQL Authentication parameters
  ##
  auth:
    ## @param auth.rootPassword Password for the `root` user. Ignored if existing secret is provided
    ## ref: https://github.com/bitnami/bitnami-docker-mysql#setting-the-root-password-on-first-run
    ##
    rootPassword: "root"
    ## @param auth.database Name for a custom database to create
    ## ref: https://github.com/bitnami/bitnami-docker-mysql/blob/master/README.md#creating-a-database-on-first-run
    ##
    database: arkid
    ## @param auth.username Name for a custom user to create
    ## ref: https://github.com/bitnami/bitnami-docker-mysql/blob/master/README.md#creating-a-database-user-on-first-run
    ##
    username: "arkid"
    ## @param auth.password Password for the new user. Ignored if existing secret is provided
    ##
    password: "arkid"
    ## @param auth.replicationUser MySQL replication user
    ## ref: https://github.com/bitnami/bitnami-docker-mysql#setting-up-a-replication-cluster
    ##
    replicationUser: replicator
    ## @param auth.replicationPassword MySQL replication user password. Ignored if existing secret is provided
    ##
    replicationPassword: "replicator"
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ##
    # pullSecrets:
    #   - myRegistryKeySecretName
  primary:
    persistence:
      enabled: true
    ## {  "limits": {"cpu": "800m","memory": "1024Mi"},"requests": {"cpu": "200m","memory": "256Mi"}}
    resources: {"limits": {"cpu": "1000m", "memory": "1024Mi"}, "requests": {"cpu": "100m", "memory": "200Mi"}}
  secondary:
    persistence:
      enabled: true
    replicas: 1
    resources: {"limits": {"cpu": "1000m", "memory": "1024Mi"}, "requests": {"cpu": "100m", "memory": "200Mi"}}
  ## 主机标签
  ## 要符合json格式，如：
  ## {
  ##   "nfs": "true",
  ##   "ip": "111.111.111.111"
  ## }
  nodeSelector: {}
  # Affinity rules for scheduling Pods of this StatefulSet on Nodes.
  # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#node-affinity
  nodeAffinity: {}
  # Inter-Pod Affinity rules for scheduling Pods of this StatefulSet.
  # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  podAffinity: {}
  # Anti-affinity rules for scheduling Pods of this StatefulSet.
  # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  # You may either toggle options below for default anti-affinity rules,
  # or specify the whole set of anti-affinity rules instead of them.
  podAntiAffinity: {}
externalDatabase:
  host: ""
  port: 3306
  database: ""
  user: ""
  password: ""
redis:
  enabled: true
  image:
    registry: harbor.longguikeji.com
    repository: ark-releases/redis
    ## Bitnami Redis image tag
    ## ref: https://github.com/bitnami/bitnami-docker-redis#supported-tags-and-respective-dockerfile-links
    ##
    tag: 5.0.14-debian-10-r159
    ## Specify a imagePullPolicy
    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
    ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
    ##
    pullPolicy: IfNotPresent
  cluster:
    enabled: false
    slaveCount: 0
  clusterDomain: cluster.local
  pullPolicy: IfNotPresent
  ## 主机标签
  ## 要符合json格式，如：
  ## {
  ##   "nfs": "true",
  ##   "ip": "111.111.111.111"
  ## }
  nodeSelector: {}
  # Affinity rules for scheduling Pods of this StatefulSet on Nodes.
  # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#node-affinity
  nodeAffinity: {}
  # Inter-Pod Affinity rules for scheduling Pods of this StatefulSet.
  # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  podAffinity: {}
  # Anti-affinity rules for scheduling Pods of this StatefulSet.
  # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  # You may either toggle options below for default anti-affinity rules,
  # or specify the whole set of anti-affinity rules instead of them.
  podAntiAffinity: {}
externalRedis:
  host: ""
  port: 6379
  db: 0
ldap:
  enabled: true
  image: harbor.longguikeji.com/ark-releases/arkid_ldap_server:latest
  pullPolicy: IfNotPresent
  ## service 的类型，ClusterIP, NodePort, LoadBalancer
  svcType: NodePort
  # 当svcType为NodePort时有效，ldap 389暴露到nodePort的端口, 留空则会随机挑选一个端口
  nodePort389: 30189
  ## 主机标签
  ## 要符合json格式，如：
  ## {
  ##   "nfs": "true",
  ##   "ip": "111.111.111.111"
  ## }
  nodeSelector: {}
  # Affinity rules for scheduling Pods of this StatefulSet on Nodes.
  # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#node-affinity
  nodeAffinity: {}
  # Inter-Pod Affinity rules for scheduling Pods of this StatefulSet.
  # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  podAffinity: {}
  # Anti-affinity rules for scheduling Pods of this StatefulSet.
  # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  # You may either toggle options below for default anti-affinity rules,
  # or specify the whole set of anti-affinity rules instead of them.
  podAntiAffinity: {}
be:
  image: "registry.cn-zhangjiakou.aliyuncs.com/ark-releases/arkid:2.6.3"
  pullPolicy: IfNotPresent
  ## {  "limits": {"cpu": "800m","memory": "1024Mi"},"requests": {"cpu": "200m","memory": "256Mi"}}
  resources:
    limits: {}
    requests: {"cpu": "100m", "memory": "256Mi"}
  replicas: 1
  ## 主机标签
  ## 要符合json格式，如：
  ## {
  ##   "nfs": "true",
  ##   "ip": "111.111.111.111"
  ## }
  nodeSelector: {}
  # Affinity rules for scheduling Pods of this StatefulSet on Nodes.
  # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#node-affinity
  nodeAffinity: {}
  # Inter-Pod Affinity rules for scheduling Pods of this StatefulSet.
  # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  podAffinity: {}
  # Anti-affinity rules for scheduling Pods of this StatefulSet.
  # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  # You may either toggle options below for default anti-affinity rules,
  # or specify the whole set of anti-affinity rules instead of them.
  podAntiAffinity:
    # Type of anti-affinity rules: either `soft`, `hard` or empty value (which
    # disables anti-affinity rules).
    type: soft
    # Weight for `soft` anti-affinity rules.
    # Does not apply for other anti-affinity types.
    weight: 100
fe:
  image: "registry.cn-zhangjiakou.aliyuncs.com/ark-releases/arkid-fe:2.6.4"
  pullPolicy: IfNotPresent
  ## {  "limits": {"cpu": "800m","memory": "1024Mi"},"requests": {"cpu": "200m","memory": "256Mi"}}
  resources:
    limits: {}
    requests: {"cpu": "100m", "memory": "256Mi"}
  replicas: 1
  ## 主机标签
  ## 要符合json格式，如：
  ## {
  ##   "nfs": "true",
  ##   "ip": "111.111.111.111"
  ## }
  nodeSelector: {}
  # Affinity rules for scheduling Pods of this StatefulSet on Nodes.
  # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#node-affinity
  nodeAffinity: {}
  # Inter-Pod Affinity rules for scheduling Pods of this StatefulSet.
  # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  podAffinity: {}
  # Anti-affinity rules for scheduling Pods of this StatefulSet.
  # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  # You may either toggle options below for default anti-affinity rules,
  # or specify the whole set of anti-affinity rules instead of them.
  podAntiAffinity:
    # Type of anti-affinity rules: either `soft`, `hard` or empty value (which
    # disables anti-affinity rules).
    type: soft
    # Weight for `soft` anti-affinity rules.
    # Does not apply for other anti-affinity types.
    weight: 100
docs:
  ## 如果true，则会部署一个文档容器， 访问域名+/docs/ 可以查看arkid文档
  enabled: true
portal:
  image: nginx:alpine
  pullPolicy: IfNotPresent
  ## service 的类型，ClusterIP, NodePort, LoadBalancer
  svcType: NodePort
  ## 主机标签
  ## 要符合json格式，如：
  ## {
  ##   "nfs": "true",
  ##   "ip": "111.111.111.111"
  ## }
  nodeSelector: {}
  # Affinity rules for scheduling Pods of this StatefulSet on Nodes.
  # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#node-affinity
  nodeAffinity: {}
  # Inter-Pod Affinity rules for scheduling Pods of this StatefulSet.
  # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  podAffinity: {}
  # Anti-affinity rules for scheduling Pods of this StatefulSet.
  # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  # You may either toggle options below for default anti-affinity rules,
  # or specify the whole set of anti-affinity rules instead of them.
  podAntiAffinity: {}
desktop:
  image: registry.cn-zhangjiakou.aliyuncs.com/ark-releases/ark-desktop:2.6.6
  pullPolicy: IfNotPresent
  nodeSelector: {}
  resources:
    limits: {}
    requests: {"cpu": "100m", "memory": "124Mi"}
tasks:
  image: "registry.cn-zhangjiakou.aliyuncs.com/ark-releases/arkid-celery-tasks:1.0.1"
  ## 主机标签
  ## 要符合json格式，如：
  ## {
  ##   "nfs": "true",
  ##   "ip": "111.111.111.111"
  ## }
  nodeSelector: {}
  resources:
    limits: {}
    requests: {"cpu": "100m", "memory": "256Mi"}
nameOverride: ""
fullnameOverride: ""
ingress:
  enabled: false
  # cert-manager 
  cert: false
  # 为空则使用 cert-manager生成的证书，不为空则使用指定的证书
  secret:
  annotations: {"kubernetes.io/ingress.class": "nginx", "certmanager.k8s.io/cluster-issuer": "letsencrypt-prod"}
  host:
    # 需要DNS解析到ingress的ip
    # 本地调试就在 /etc/hosts里配置一下
    name: arkid.cc
  # 如果没有 cert-manager，tls为true则helm会生成一个自签名的证书存到secret
  tls: false
ingressroute:
  enabled: false
  host:
    # 需要DNS解析到ingress的ip
    # 本地调试就在 /etc/hosts里配置一下
    name: arkid.cc
  tls:
    enabled: true
    certResolver:
## 
# hc:
#   enabled: false
#   image: harbor.longguikeji.com/ark-releases/helm-controller:v0.12.1
ahc:
  enabled: enable
  image: harbor.longguikeji.com/ark-releases/arkid-helm-controller:0.0.1
ha:
  enabled: true
