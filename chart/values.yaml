imagePullSecrets:
# 持久化后端
persistence:
  init: true
  storageClass:
  accessMode: ReadWriteOnce
  size: 8Gi
initContainers:
  image: harbor.longguikeji.com/ark-releases/busybox:latest
  pullPolicy: IfNotPresent
mysql:
  enabled: true
  image:
    registry: harbor.longguikeji.com
    repository: ark-releases/mysql
    tag: 5.7.37-debian-10-r55
    pullPolicy: IfNotPresent
  ## @param architecture MySQL architecture (`standalone` or `replication`)
  ##
  architecture: standalone
  ## MySQL Authentication parameters
  ##
  auth:
    ## @param auth.rootPassword Password for the `root` user. Ignored if existing secret is provided
    ## ref: https://github.com/bitnami/bitnami-docker-mysql#setting-the-root-password-on-first-run
    ##
    rootPassword: "root"
    ## @param auth.database Name for a custom database to create
    ## ref: https://github.com/bitnami/bitnami-docker-mysql/blob/master/README.md#creating-a-database-on-first-run
    ##
    database: arkid
    ## @param auth.username Name for a custom user to create
    ## ref: https://github.com/bitnami/bitnami-docker-mysql/blob/master/README.md#creating-a-database-user-on-first-run
    ##
    username: "arkid"
    ## @param auth.password Password for the new user. Ignored if existing secret is provided
    ##
    password: "arkid"
    ## @param auth.replicationUser MySQL replication user
    ## ref: https://github.com/bitnami/bitnami-docker-mysql#setting-up-a-replication-cluster
    ##
    replicationUser: replicator
    ## @param auth.replicationPassword MySQL replication user password. Ignored if existing secret is provided
    ##
    replicationPassword: "replicator"
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ##
    # pullSecrets:
    #   - myRegistryKeySecretName
  primary:
    persistence:
      enabled: true
    ## {  "limits": {"cpu": "800m","memory": "1024Mi"},"requests": {"cpu": "200m","memory": "256Mi"}}
    resources: {"limits": {"cpu": "1000m", "memory": "1024Mi"}, "requests": {"cpu": "100m", "memory": "200Mi"}}
  secondary:
    persistence:
      enabled: true
    replicas: 1
    resources: {"limits": {"cpu": "1000m", "memory": "1024Mi"}, "requests": {"cpu": "100m", "memory": "200Mi"}}
  ## 主机标签
  ## 要符合json格式，如：
  ## {
  ##   "nfs": "true",
  ##   "ip": "111.111.111.111"
  ## }
  nodeSelector: {}
  # Affinity rules for scheduling Pods of this StatefulSet on Nodes.
  # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#node-affinity
  nodeAffinity: {}
  # Inter-Pod Affinity rules for scheduling Pods of this StatefulSet.
  # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  podAffinity: {}
  # Anti-affinity rules for scheduling Pods of this StatefulSet.
  # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  # You may either toggle options below for default anti-affinity rules,
  # or specify the whole set of anti-affinity rules instead of them.
  podAntiAffinity: {}
externalDatabase:
  host: ""
  port: 3306
  database: ""
  user: ""
  password: ""
redis:
  enabled: true
  image:
    registry: harbor.longguikeji.com
    repository: ark-releases/redis
    ## Bitnami Redis image tag
    ## ref: https://github.com/bitnami/bitnami-docker-redis#supported-tags-and-respective-dockerfile-links
    ##
    tag: 5.0.14-debian-10-r159
    ## Specify a imagePullPolicy
    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
    ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
    ##
    pullPolicy: IfNotPresent
  cluster:
    enabled: false
    slaveCount: 0
  clusterDomain: cluster.local
  pullPolicy: IfNotPresent
  ## 主机标签
  ## 要符合json格式，如：
  ## {
  ##   "nfs": "true",
  ##   "ip": "111.111.111.111"
  ## }
  nodeSelector: {}
  # Affinity rules for scheduling Pods of this StatefulSet on Nodes.
  # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#node-affinity
  nodeAffinity: {}
  # Inter-Pod Affinity rules for scheduling Pods of this StatefulSet.
  # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  podAffinity: {}
  # Anti-affinity rules for scheduling Pods of this StatefulSet.
  # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  # You may either toggle options below for default anti-affinity rules,
  # or specify the whole set of anti-affinity rules instead of them.
  podAntiAffinity: {}
externalRedis:
  host: ""
  port: 6379
  db: 0
ldap:
  enabled: true
  image: registry.cn-zhangjiakou.aliyuncs.com/ark-releases/arkid_ldap_server:2.6.8
  pullPolicy: IfNotPresent
  ## service 的类型，ClusterIP, NodePort, LoadBalancer
  svcType: NodePort
  # 当svcType为NodePort时有效，ldap 389暴露到nodePort的端口, 留空则会随机挑选一个端口
  nodePort389: 30189
  ## 主机标签
  ## 要符合json格式，如：
  ## {
  ##   "nfs": "true",
  ##   "ip": "111.111.111.111"
  ## }
  nodeSelector: {}
  # Affinity rules for scheduling Pods of this StatefulSet on Nodes.
  # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#node-affinity
  nodeAffinity: {}
  # Inter-Pod Affinity rules for scheduling Pods of this StatefulSet.
  # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  podAffinity: {}
  # Anti-affinity rules for scheduling Pods of this StatefulSet.
  # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  # You may either toggle options below for default anti-affinity rules,
  # or specify the whole set of anti-affinity rules instead of them.
  podAntiAffinity: {}
be:
  image: "registry.cn-zhangjiakou.aliyuncs.com/ark-releases/arkid:2.6.9"
  pullPolicy: IfNotPresent
  ## {  "limits": {"cpu": "800m","memory": "1024Mi"},"requests": {"cpu": "200m","memory": "256Mi"}}
  resources:
    limits: {}
    requests: {"cpu": "100m", "memory": "256Mi"}
  replicas: 1
  ## 主机标签
  ## 要符合json格式，如：
  ## {
  ##   "nfs": "true",
  ##   "ip": "111.111.111.111"
  ## }
  nodeSelector: {}
  # Affinity rules for scheduling Pods of this StatefulSet on Nodes.
  # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#node-affinity
  nodeAffinity: {}
  # Inter-Pod Affinity rules for scheduling Pods of this StatefulSet.
  # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  podAffinity: {}
  # Anti-affinity rules for scheduling Pods of this StatefulSet.
  # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  # You may either toggle options below for default anti-affinity rules,
  # or specify the whole set of anti-affinity rules instead of them.
  podAntiAffinity:
    # Type of anti-affinity rules: either `soft`, `hard` or empty value (which
    # disables anti-affinity rules).
    type: soft
    # Weight for `soft` anti-affinity rules.
    # Does not apply for other anti-affinity types.
    weight: 100
fe:
  image: "registry.cn-zhangjiakou.aliyuncs.com/ark-releases/arkid-fe:2.6.9"
  pullPolicy: IfNotPresent
  ## {  "limits": {"cpu": "800m","memory": "1024Mi"},"requests": {"cpu": "200m","memory": "256Mi"}}
  resources:
    limits: {}
    requests: {"cpu": "100m", "memory": "256Mi"}
  replicas: 1
  ## 主机标签
  ## 要符合json格式，如：
  ## {
  ##   "nfs": "true",
  ##   "ip": "111.111.111.111"
  ## }
  nodeSelector: {}
  # Affinity rules for scheduling Pods of this StatefulSet on Nodes.
  # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#node-affinity
  nodeAffinity: {}
  # Inter-Pod Affinity rules for scheduling Pods of this StatefulSet.
  # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  podAffinity: {}
  # Anti-affinity rules for scheduling Pods of this StatefulSet.
  # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  # You may either toggle options below for default anti-affinity rules,
  # or specify the whole set of anti-affinity rules instead of them.
  podAntiAffinity:
    # Type of anti-affinity rules: either `soft`, `hard` or empty value (which
    # disables anti-affinity rules).
    type: soft
    # Weight for `soft` anti-affinity rules.
    # Does not apply for other anti-affinity types.
    weight: 100
docs:
  ## 如果true，则会部署一个文档容器， 访问域名+/docs/ 可以查看arkid文档
  enabled: true
portal:
  image: registry.cn-zhangjiakou.aliyuncs.com/ark-releases/arkid-portal:2.6.8-fix
  pullPolicy: IfNotPresent
  ## service 的类型，ClusterIP, NodePort, LoadBalancer
  svcType: NodePort
  ## 主机标签
  ## 要符合json格式，如：
  ## {
  ##   "nfs": "true",
  ##   "ip": "111.111.111.111"
  ## }
  nodeSelector: {}
  # Affinity rules for scheduling Pods of this StatefulSet on Nodes.
  # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#node-affinity
  nodeAffinity: {}
  # Inter-Pod Affinity rules for scheduling Pods of this StatefulSet.
  # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  podAffinity: {}
  # Anti-affinity rules for scheduling Pods of this StatefulSet.
  # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  # You may either toggle options below for default anti-affinity rules,
  # or specify the whole set of anti-affinity rules instead of them.
  podAntiAffinity: {}
desktop:
  image: registry.cn-zhangjiakou.aliyuncs.com/ark-releases/ark-desktop:2.6.8-fix
  pullPolicy: IfNotPresent
  nodeSelector: {}
  resources:
    limits: {}
    requests: {"cpu": "100m", "memory": "124Mi"}
tasks:
  image: "registry.cn-zhangjiakou.aliyuncs.com/ark-releases/arkid-celery-tasks:latest"
  ## 主机标签
  ## 要符合json格式，如：
  ## {
  ##   "nfs": "true",
  ##   "ip": "111.111.111.111"
  ## }
  nodeSelector: {}
  resources:
    limits: {}
    requests: {"cpu": "100m", "memory": "256Mi"}
nameOverride: ""
fullnameOverride: ""
ingress:
  enabled: false
  ingressClassName: ""
  ## @param ingress.secrets Custom TLS certificates as secrets
  ## NOTE: 'key' and 'certificate' are expected in PEM format
  ## NOTE: 'name' should line up with a 'secretName' set further up
  ## If it is not set and you're using cert-manager, this is unneeded, as it will create a secret for you with valid certificates
  ## If it is not set and you're NOT using cert-manager either, self-signed certificates will be created valid for 365 days
  ## It is also possible to create and manage the certificates outside of this helm chart
  ## Please see README.md for more information
  ## e.g:
  ## secrets:
  ##   - name: arkid.local-tls
  ##     key: |-
  ##       -----BEGIN RSA PRIVATE KEY-----
  ##       ...
  ##       -----END RSA PRIVATE KEY-----
  ##     certificate: |-
  ##       -----BEGIN CERTIFICATE-----
  ##       ...
  ##       -----END CERTIFICATE-----
  ##
  secrets: []
  ## @param ingress.annotations [object] Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
  ## For a full list of possible ingress annotations, please see
  ## ref: https://github.com/kubernetes/ingress-nginx/blob/main/docs/user-guide/nginx-configuration/annotations.md
  ## Use this parameter to set the required annotations for cert-manager, see
  ## ref: https://cert-manager.io/docs/usage/ingress/#supported-annotations
  ##
  ## e.g:
  ## annotations:
  ##   kubernetes.io/ingress.class: nginx
  ##   cert-manager.io/cluster-issuer: letsencrypt-staging
  ## e.g:
  ## annotations: {"kubernetes.io/ingress.class": "nginx", "cert-manager.io/issuer": "letsencrypt-prod"}
  annotations: {}
  host:
    # 需要DNS解析到ingress的ip
    # 本地调试就在 /etc/hosts里配置一下
    name: arkid.cc
  ## @param ingress.tls Enable TLS configuration for the host defined at `ingress.hostname` parameter
  ## TLS certificates will be retrieved from a TLS secret with name: `{{- printf "%s-tls" .Values.ingress.hostname }}`
  ## You can:
  ##   - Use the `ingress.secrets` parameter to create this TLS secret
  ##   - Rely on cert-manager to create it by setting the corresponding annotations
  ##   - Rely on Helm to create self-signed certificates by setting `ingress.selfSigned=true`
  ##
  tls: false
  ## @param ingress.selfSigned Create a TLS secret for this ingress record using self-signed certificates generated by Helm
  ##
  selfSigned: false
ingressroute:
  enabled: false
  annotations: {}
  host:
    # 需要DNS解析到ingress的ip
    # 本地调试就在 /etc/hosts里配置一下
    name: arkid.cc
  tls:
    enabled: false
    certResolver: ali
hc:
  enabled: true
  image: registry.cn-zhangjiakou.aliyuncs.com/ark-releases/arkid-helm-controller:2.6.8-fix
  pullPolicy: IfNotPresent
  ## 主机标签
  ## 要符合json格式，如：
  ## {
  ##   "nfs": "true",
  ##   "ip": "111.111.111.111"
  ## }
  nodeSelector: {}
